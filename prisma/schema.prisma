generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model Usuario {
  id                  String     @id @default(uuid())
  nome                String
  email               String     @unique
  senha               String
  isAdmin             Boolean    @default(false)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  // Um utilizador tem uma lista de itens
  itens               Item[]

  // Um utilizador pode ter FEITO várias propostas.
  propostasFeitas     Proposta[] @relation("PropostasFeitas")

  // Um utilizador pode ter RECEBIDO várias propostas.
  propostasRecebidas  Proposta[] @relation("PropostasRecebidas")

  notificacoes Notificacao[] @relation("NotificacoesDoUsuario")
}

model Item {
  id                   String     @id @default(uuid())
  nome                 String     @db.VarChar(30)
  descricao            String?
  categoria            String     @db.VarChar(30)
  status               String     @default("Disponível")
  foto                 String?   

  usuarioResponsavelId String // Foreign Key para o Usuário responsável pelo item
  usuarioResponsavel   Usuario    @relation(fields: [usuarioResponsavelId], references: [id])

  propostasOfertadas  Proposta[] @relation("ItemOfertado") // Relacionamento com propostas onde este item é ofertado
  propostasDesejadas  Proposta[] @relation("ItemDesejado") // Relacionamento com propostas onde este item é desejado

}

model Proposta {
  id                      String    @id @default(uuid())
  status                  String    @default("pendente")
  mensagem                String?
  dataCriacao             DateTime  @default(now())
  dataResposta            DateTime?
  responsabilidadeAceita  Boolean   @default(false)
  createdAt               DateTime  @default(now())

  // Relação para o item ofertado
  itemOfertadoId          String
  itemOfertado            Item      @relation("ItemOfertado", fields: [itemOfertadoId], references: [id])

  // Relação para o item desejado
  itemDesejadoId          String
  itemDesejado            Item      @relation("ItemDesejado", fields: [itemDesejadoId], references: [id])

  // Relação para quem FEZ a proposta
  quemFezId               String
  quemFez                 Usuario   @relation("PropostasFeitas", fields: [quemFezId], references: [id])

  // Relação para quem RECEBEU a proposta
  quemRecebeuId           String
  quemRecebeu             Usuario   @relation("PropostasRecebidas", fields: [quemRecebeuId], references: [id])
}

model Notificacao {
  id            String   @id @default(uuid())
  mensagem      String   
  lida          Boolean  @default(false) 
  link          String   
  createdAt     DateTime @default(now())

  //A notificação pertence a um utilizador (o destinatário)
  destinatarioId String
  destinatario    Usuario  @relation("NotificacoesDoUsuario", fields: [destinatarioId], references: [id])
}
